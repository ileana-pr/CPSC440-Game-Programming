File I/O in C CPSC305 


We have seen the printf and scanf functions for doing I/O in C. There are versions of these functions call fprintf and fscanf which work similarly except that they work with files instead of standard input and output.

To use them, we must create a FILE* object, which is a pointer to a FILE structure.

To create a file, we use the fopen function which takes the name of the file as the first parameter. The second parameter is the mode string which is one of the following:

Mode	Meaning
r	Open for reading.
r+	Open for reading and writing, file is not overwritten.
w	Open for writing.
w+	Open for reading and writing, but file is overwritten if exists.
a	Open for appending (writes at end of file).
a+	Open for reading and appending.
To read a number from an input file, we could use:

#include <stdio.h>

int main() {
    FILE* file = fopen("data.txt", "r");

    int number;
    fscanf(file, "%d", &number);
    printf("Read %d\n", number);

    fclose(file);

    return 0;
}
 
Binary Input and Output
C also has functions for reading and writing binary data. The fread function takes the following parameters:

void* ptr

This is a pointer into memory where the data should be read into. A void* is a pointer that can point to any data type. fread can be used to read any data type (including structs).

int size

The size of each data element to be read. Because fread works for any type, we must tell it how big each element is.

int num

The number of elements to read. If greater than 1, fread will read in multiple elements at once (as in a whole array).

FILE* file

The file to read from (which must already be open).

fread returns the number of elements which were successfully read. You should check that this is equal to the number you attempted to read.

The following example shows how we could read in an array of 5 numbers stored in binary:

int array[5];
if (fread(array, sizeof(int), 5, file) != 5) {
    /* there was an error */
}
The analogous function for output is fwrite, which takes exactly the same parameters as fread, except that it writes the data to a file instead of reading it.

An example which would write the binary values above would look like:

int array[5];
if (fwrite(array, sizeof(int), 5, file) != 5) {
    /* there was an error */
}
This programs reads 5 ints from the user and writes them to a file in binary. Notice that the file will not be human-readable afterwards! You can use the hexdump -C command to view the file.